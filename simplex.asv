%%%%%%%%%%%%%%%%%%%%%%%%%%%
% SIMPLEX.m
%
% DESCRIPTION
%   Applies the simplex method to a given primal problem.
%
% AUTHOR
%   Trevor Squires
%
% ARGUMENTS
%   A - m x n  matrix
%   c - 1 x n cost vector
%   param - optional parameters
%
% OUTPUT
%   x - optimal solutions
%   output - structure of optional output variables
%
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [solu,output] = simplex(A,c,basicVar, solu,param)

[m,n] = size(A);

entVarSelect = defaultField(param,'entVarSelect',@dantzigPriceEnt);
exitVarSelect = defaultField(param,'exitVarSelect',@dantzigPriceExit);
maxIt = defaultField(param,'maxIt',1000);


Basis = A(:,basicVar);
Binv = inv(Basis);

nonBasicVar = setxor(1:n,basicVar);
redCosts = zeros(1,length(nonBasicVar));

for it = 1:maxIt
    %% Compute reduced costs
    for i=1:length(nonBasicVar)
        redCosts(i) = c(nonBasicVar(i)) - c(basicVar)*Binv*A(:,nonBasicVar(i));
    end
    
    if min(redCosts) >= 0
        output.exitFlag = 0;
        break;
    end
    
    %% Determine Exiting Variable
    exitVar = exitVarSelect(redCosts, nonBasicVar);
    exitDirection = zeros(1,n);
    exitDirection(nonBasicVar)= Binv*A(:,nonBasicVar(exitVar)); 
    
    %% Determine Entering Variable
    if max(exitDirection) <= 0
        output.exitFlag = 1;
        output.direction = exitDirection;
        break;
    else
        entVar = entVarSelect(exitDirection,basicVar,solu);
    end
    exitDistance = solu(basicVar(entVar))/exitDirection(entVar);
    
    %% Setup for next iteration
    solu(nonBasicVar) = solu + exitDistance*exitDirection(nonBasicVar);
    tmp = basicVar(exitVar);
    basicVar(exitVar) = nonBasicVar(entVar);
    nonBasicVar(entVar) = tmp;
    
    Basis = A(:,basicVar);
    Binv = inv(Basis);
end

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
end